name: Lint VanillaInstaller and build a dev build

on: [push, pull_request]

permissions:
  contents: read

jobs:
  lint:
    name: Lint with flake8
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04", "macos-12", "windows-2022"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        # https://github.com/snok/install-poetry#caching-on-windows-runners
        if: ${{ runner.os != 'Windows' }}
        uses: actions/cache@v3
        with:
          path: .venv
          key: ci-lint-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --only ci
      - name: Lint with flake8
        run: |
          source $VENV
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./vanilla_installer/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ./vanilla_installer/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore=E501,E722,E266

  build-python:
    name: Build Python wheels
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ci-build-python-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Shorten commit SHA
        uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - name: Build
        run: pyside6-rcc vanilla_installer/assets/fonts.qrc -o vanilla_installer/fonts.py && poetry build --no-interaction
      - name: Get normalized branch name
        run: |
          RAW_BRANCH=${{ github.ref_name || github.head_ref }}
          BRANCH=${RAW_BRANCH//\//-}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV          
      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: Vanilla Installer ${{ env.BRANCH }}+${{ steps.short-sha.outputs.sha }} (Python sdist + whl)
          path: "dist/*"

  build-windows:
    name: Build Windows exe
    runs-on: windows-2022
    needs: [lint, build-python]
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v3
      # nuitka currently only supports Python <=3.10 right now
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Shorten commit SHA
        uses: benjlevesque/short-sha@v2.1
        id: short-sha
        # was having issues without installing Qt, so install it using
        # this GHA wrapper around aqtinstall
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.4.*
          setup-python: false
          aqtversion: ==3.1.*
          py7zrversion: ==0.20.*
      - name: Get normalized branch name
        shell: bash
        run: |
          RAW_BRANCH=${{ github.ref_name || github.head_ref }}
          BRANCH=${RAW_BRANCH//\//-}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      - name: Install dependencies and build
        run: |
          pipx run poetry install --no-interaction --with compile
          ./.venv/Scripts/activate.ps1
          pip install nuitka minecraft_launcher_lib PySide6 click tomli darkdetect
          pyside6-rcc vanilla_installer/assets/fonts.qrc -o vanilla_installer/fonts.py
          python -m nuitka --standalone --onefile --windows-icon-from-ico=media/icon.ico --output-dir=build --include-package=minecraft_launcher_lib,PySide6,click,tomli,darkdetect -o "Vanilla Installer-GUI ${{ env.BRANCH }}+${{ steps.short-sha.outputs.sha }}.exe" --enable-plugin=pyside6 --include-data-dir=vanilla_installer/assets=assets/ --disable-console --nofollow-import-to=PySide6.examples vanilla_installer/gui.py --assume-yes-for-downloads
      - name: Upload built executable
        uses: actions/upload-artifact@v3
        with:
          name: Vanilla Installer ${{ env.BRANCH }}+${{ steps.short-sha.outputs.sha }} (Windows)
          path: "build/*.exe"

  # build-macos:
    # name: Build macOS app bundle
    # runs-on: macos-12
    # needs: [lint, build-python]
    # steps:
      # - uses: actions/checkout@v3
      # same as above
      # - name: Set up Python 3.10
        # uses: actions/setup-python@v4
        # with:
          # python-version: "3.10"
      # - name: Install and configure Poetry
        # uses: snok/install-poetry@v1
        # with:
          # virtualenvs-in-project: true
          # installer-parallel: true
      # - name: Load cached venv
        # id: cached-poetry-dependencies
        # uses: actions/cache@v3
        # with:
          # path: .venv
          # key: ci-build-macos-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # - name: Shorten commit SHA
        # uses: benjlevesque/short-sha@v2.1
        # id: short-sha
        # was having issues without installing Qt, so install it using
        # this GHA wrapper around aqtinstall
      # - name: Install Qt
        # uses: jurplel/install-qt-action@v3
        # with:
          # version: 6.2.*
          # setup-python: false
          # aqtversion: ==3.1.*
          # py7zrversion: ==0.20.*
      # - name: Install dependencies
        # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        # run: poetry install --no-interaction --with compile
        
      # - name: Build app bundle
        # run: poetry run python3 -m nuitka --macos-create-app-bundle --macos-app-icon=media/icon.icns --macos-app-version="dev+${{ steps.short-sha.outputs.sha }}" --macos-signed-app-name="io.github.fabulously_optimized.vanilla_installer" --standalone --onefile --output-dir=build --include-package=minecraft_launcher_lib,PySide6,click,tomli,darkdetect -o "Vanilla Installer-GUI v1.0.0b1.exe" --enable-plugin=pyside6 --include-data-dir=vanilla_installer/assets=assets/ --disable-console vanilla_installer/gui.py
      # - name: Upload built wheels
        # uses: actions/upload-artifact@v3
        # with:
          # name: Vanilla Installer $(date -u) (macOS)
          # path: "*.app"
